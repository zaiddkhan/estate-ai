import fs from 'fs';
import { spawn } from 'child_process';
import readline from 'readline';

class S3SetupWizard {
    constructor() {
        this.config = {};
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
    }

    async start() {
        console.log('🌟 S3 Integration Setup Wizard');
        console.log('=' .repeat(50));
        console.log('This wizard will help you set up Amazon S3 integration');
        console.log('for storing your cleaned housing data.\n');

        try {
            await this.checkPrerequisites();
            await this.collectCredentials();
            await this.createEnvFile();
            await this.testConnection();
            await this.showNextSteps();
        } catch (error) {
            console.error('❌ Setup failed:', error.message);
            process.exit(1);
        } finally {
            this.rl.close();
        }
    }

    async checkPrerequisites() {
        console.log('🔍 Step 1: Checking Prerequisites\n');

        // Check if AWS SDK is installed
        try {
            await import('aws-sdk');
            console.log('✅ AWS SDK is installed');
        } catch (error) {
            console.log('❌ AWS SDK not found');
            console.log('💡 Installing AWS SDK...');
            await this.runCommand('npm', ['install', 'aws-sdk']);
            console.log('✅ AWS SDK installed');
        }

        // Check if .env.example exists
        if (fs.existsSync('.env.example')) {
            console.log('✅ Environment template found');
        } else {
            console.log('⚠️  Environment template not found - will create one');
        }

        console.log('');
    }

    async collectCredentials() {
        console.log('🔐 Step 2: AWS Credentials Setup\n');

        console.log('You need the following from your AWS account:');
        console.log('1. AWS Access Key ID');
        console.log('2. AWS Secret Access Key');
        console.log('3. AWS Region (e.g., us-east-1, ap-south-1)');
        console.log('4. S3 Bucket Name\n');

        // Check if AWS CLI is configured
        const awsConfigured = await this.checkAWSCLI();
        if (awsConfigured) {
            const useAWS = await this.askQuestion('Use existing AWS CLI configuration? (y/n): ');
            if (useAWS.toLowerCase() === 'y') {
                console.log('✅ Using AWS CLI configuration');
                // Still need bucket name
                this.config.bucketName = await this.askQuestion('Enter S3 bucket name: ');
                this.config.region = await this.getAWSRegion();
                return;
            }
        }

        // Manual credential entry
        console.log('\n📝 Please enter your AWS credentials:');
        this.config.accessKeyId = await this.askQuestion('AWS Access Key ID: ');
        this.config.secretAccessKey = await this.askQuestion('AWS Secret Access Key: ', true);
        this.config.region = await this.askQuestion('AWS Region (default: us-east-1): ') || 'us-east-1';
        this.config.bucketName = await this.askQuestion('S3 Bucket Name: ');

        console.log('');
    }

    async createEnvFile() {
        console.log('📄 Step 3: Creating Environment File\n');

        const envContent = `# AWS S3 Configuration
# Generated by S3 Setup Wizard on ${new Date().toISOString()}

# AWS Credentials
${this.config.accessKeyId ? `AWS_ACCESS_KEY_ID=${this.config.accessKeyId}` : '# AWS_ACCESS_KEY_ID=your_aws_access_key_here'}
${this.config.secretAccessKey ? `AWS_SECRET_ACCESS_KEY=${this.config.secretAccessKey}` : '# AWS_SECRET_ACCESS_KEY=your_aws_secret_key_here'}
AWS_REGION=${this.config.region}

# S3 Bucket Configuration
S3_BUCKET_NAME=${this.config.bucketName}
S3_KEY_PREFIX=housing-data/

# Optional S3 Settings
S3_STORAGE_CLASS=STANDARD_IA
S3_ENCRYPTION=AES256

# Note: Keep this file secure and never commit it to version control!
`;

        fs.writeFileSync('.env', envContent);
        console.log('✅ Created .env file');

        // Update .gitignore
        await this.updateGitignore();

        console.log('');
    }

    async testConnection() {
        console.log('🔧 Step 4: Testing S3 Connection\n');

        try {
            // Dynamically import and test
            const { default: S3Uploader } = await import('./s3Uploader.js');
            const uploader = new S3Uploader();

            console.log('Testing S3 connection...');
            const result = await uploader.testConnection();

            if (result.success) {
                console.log('✅ S3 connection successful!');
                console.log('✅ Bucket is accessible');
                console.log('✅ Permissions are correct');
            } else {
                console.log('❌ S3 connection failed:', result.error);

                if (result.suggestion) {
                    console.log('💡 Suggestion:', result.suggestion);
                }

                const retry = await this.askQuestion('\nWould you like to retry with different settings? (y/n): ');
                if (retry.toLowerCase() === 'y') {
                    await this.collectCredentials();
                    await this.createEnvFile();
                    await this.testConnection();
                    return;
                }
            }
        } catch (error) {
            console.log('❌ Connection test error:', error.message);
            console.log('💡 Make sure your S3 uploader module is properly set up');
        }

        console.log('');
    }

    async showNextSteps() {
        console.log('🎉 Step 5: Setup Complete!\n');

        console.log('Your S3 integration is now configured. Here are your next steps:\n');

        console.log('📋 Available Commands:');
        console.log('  npm run test:s3           - Quick S3 connection test');
        console.log('  npm run test:s3:full      - Full S3 integration test');
        console.log('  npm run clean:s3          - Clean data and upload to S3');
        console.log('  npm run upload:s3         - Upload existing cleaned data to S3');
        console.log('  npm run full-process:s3   - Extract, clean, upload, and analyze');
        console.log('');

        console.log('📁 Your data will be stored in S3 at:');
        console.log(`  s3://${this.config.bucketName}/housing-data/`);
        console.log('');

        console.log('🔒 Security Reminders:');
        console.log('  - Your .env file contains sensitive credentials');
        console.log('  - Never commit .env to version control');
        console.log('  - Regularly rotate your AWS access keys');
        console.log('  - Use IAM roles when possible (especially on EC2)');
        console.log('');

        console.log('📖 For detailed documentation, see: S3_SETUP.md');
        console.log('');

        const runTest = await this.askQuestion('Run a quick test now? (y/n): ');
        if (runTest.toLowerCase() === 'y') {
            console.log('\n🧪 Running quick test...');
            try {
                await this.runCommand('npm', ['run', 'test:s3']);
            } catch (error) {
                console.log('Test completed - check output above for results');
            }
        }

        console.log('\n✨ S3 Setup Complete! Happy data processing! ✨');
    }

    async checkAWSCLI() {
        try {
            await this.runCommand('aws', ['sts', 'get-caller-identity'], { silent: true });
            return true;
        } catch (error) {
            return false;
        }
    }

    async getAWSRegion() {
        try {
            const result = await this.runCommand('aws', ['configure', 'get', 'region'], { silent: true, capture: true });
            return result.trim() || 'us-east-1';
        } catch (error) {
            return 'us-east-1';
        }
    }

    async updateGitignore() {
        const gitignoreFile = '.gitignore';
        let gitignoreContent = '';

        if (fs.existsSync(gitignoreFile)) {
            gitignoreContent = fs.readFileSync(gitignoreFile, 'utf8');
        }

        const envEntries = [
            '# Environment variables',
            '.env',
            '.env.local',
            '.env.*.local',
            ''
        ];

        let needsUpdate = false;
        for (const entry of envEntries) {
            if (!gitignoreContent.includes(entry.trim())) {
                needsUpdate = true;
                break;
            }
        }

        if (needsUpdate) {
            if (gitignoreContent && !gitignoreContent.endsWith('\n')) {
                gitignoreContent += '\n';
            }
            gitignoreContent += envEntries.join('\n');
            fs.writeFileSync(gitignoreFile, gitignoreContent);
            console.log('✅ Updated .gitignore');
        }
    }

    async askQuestion(question, isPassword = false) {
        return new Promise((resolve) => {
            if (isPassword) {
                // Hide input for passwords
                process.stdout.write(question);
                process.stdin.setRawMode(true);
                process.stdin.resume();
                process.stdin.setEncoding('utf8');

                let password = '';
                const onData = (ch) => {
                    ch = ch + '';
                    switch (ch) {
                        case '\n':
                        case '\r':
                        case '\u0004': // Ctrl+D
                            process.stdin.setRawMode(false);
                            process.stdin.pause();
                            process.stdin.removeListener('data', onData);
                            console.log(''); // New line
                            resolve(password);
                            break;
                        case '\u0003': // Ctrl+C
                            process.exit();
                            break;
                        default:
                            if (ch.charCodeAt(0) === 127) { // Backspace
                                password = password.slice(0, -1);
                                process.stdout.write('\b \b');
                            } else {
                                password += ch;
                                process.stdout.write('*');
                            }
                            break;
                    }
                };
                process.stdin.on('data', onData);
            } else {
                this.rl.question(question, (answer) => {
                    resolve(answer.trim());
                });
            }
        });
    }

    async runCommand(command, args, options = {}) {
        return new Promise((resolve, reject) => {
            const child = spawn(command, args, {
                stdio: options.silent ? 'pipe' : 'inherit',
                shell: true
            });

            let output = '';
            if (options.capture) {
                child.stdout.on('data', (data) => {
                    output += data.toString();
                });
            }

            child.on('close', (code) => {
                if (code === 0) {
                    resolve(options.capture ? output : null);
                } else {
                    reject(new Error(`Command failed with code ${code}`));
                }
            });

            child.on('error', (error) => {
                reject(error);
            });
        });
    }
}

// CLI execution
if (import.meta.url === `file://${process.argv[1]}`) {
    const wizard = new S3SetupWizard();
    wizard.start().catch(error => {
        console.error('❌ Setup wizard failed:', error.message);
        process.exit(1);
    });
}

export default S3SetupWizard;
